# 词法分析器

| Token         | 输出格式       | 备注                                      |
| :------------ | :------------- | :---------------------------------------- |
| `BEGIN`       | `Begin`        |                                           |
| `END`         | `End`          |                                           |
| `FOR`         | `For`          |                                           |
| `IF`          | `If`           |                                           |
| `THEN`        | `Then`         |                                           |
| `ELSE`        | `Else`         |                                           |
| 标识符        | `Ident($name)` | 把 `$name` 替换成标识符的字符串，不带引号 |
| 无符号整常数  | `Int($value)`  | 把 `$value` 替换成整常数的值，不带前导零  |
| `:` 冒号      | `Colon`        |                                           |
| `+` 加号      | `Plus`         |                                           |
| `*` 乘号      | `Star`         |                                           |
| `,` 逗号      | `Comma`        |                                           |
| `(` 左括号    | `LParenthesis` |                                           |
| `)` 右括号    | `RParenthesis` |                                           |
| `:=` 赋值符号 | `Assign`       |                                           |
| 不能识别的    | `Unknown`      | 程序终止，不继续向下分析                  |

为了简化程序，我们做出以下约定：

- **关键字区分大小写**，且我们保证不会有与关键字相同的非全大写的标识符
- **整常数不会超过 32 位有符号整数 (int32) 的最大值**
- 数字后面紧跟着字母的情况，识别为**两个 token**（如 `1a` 识别成 `Int(1)` `Ident(a)`）

```
START: TOKEN := ‘ ‘; /*置TOKEN为空串*/
	GETNBC; GETCHAR;//移动指针到第一个字符
CASE CHAR OF
'A'.'Z':BEGIN
			WHILE ISLETTER OR ISDIGET DO//字母或数字
				BEGIN CAT; GETCHAR; END //将字符放入token读下一个字符
			UNGETCH;//后退一个字符
			C:= RESERVE;//判断token中字符是标识符还是保留字
			IF C=0 THEN RETURN(‘IDSY’, TOKEN)//是标识符直接返回
			ELSE RETURN (C,-); /*C为保留字编码*/ //返回保留字编码
		END
‘0’..’9’: BEGIN
			WHILE ISDIGIT DO//是数字
			BEGIN CAT; GETCHAR; END//放入token
            UNGETCH;//后退
			RETURN (‘INTSY’,ATOI);//返回数字
		  END
‘+’ : RETURN(‘PLUSSY’,-) ;
‘*’ : RETURN(‘STARSY’,-) ;
‘,’ : RETURN(‘COMMASY’,-) ;
‘(’ : RETURN(‘LPARSY’,-) ;
‘)’ : RETURN(‘RPARSY’,-) ;
‘:’ : BEGIN
		GETCHAR;
		if CHAR=‘=’ THEN RETURN(‘ASSIGNSY’,-);
		UNGETCH;//后退
		RETURN(‘COLONSY’,-) ;
	  END
ERROR;
END OF CASE
GOTO START;

```

```
"Begin\nIdent(x)\nColon\nIdent(NUMBER)\nIdent(y)\nColon\nIdent(NUMBER)\nThen\nIdent(x)\nAssign\nInt(11234)\nIdent(y)\nAssign\nIdent(x)\nPlus\nInt(22)\nStar\nInt(55)\nIdent(IF)\nLParenthesis\nIdent(x)\nRParenthesis\nThen\nIdent(y)\nAssign\nInt(00)\nElse\nIdent(x)\nAssign\nInt(00)\nEnd\nEnd\n"

"  Begin\n  Ident(x)\n  Colon\n  Ident(NUMBER)\n  Ident(y)\n  Colon\n  Ident(NUMBER)\n  Then\n  Ident(x)\n  Assign\n- Int(11234)\n+ Int(1234)\n  Ident(y)\n  Assign\n  Ident(x)\n  Plus\n- Int(22)\n+ Int(2)\n  Star\n- Int(55)\n- Ident(IF)\n+ Int(5)\n+ If\n  LParenthesis\n  Ident(x)\n  RParenthesis\n  Then\n  Ident(y)\n  Assign\n- Int(00)\n+ Int(0)\n  Else\n  Ident(x)\n  Assign\n- Int(00)\n+ Int(0)\n  End\n  End\n","message":null}
```

